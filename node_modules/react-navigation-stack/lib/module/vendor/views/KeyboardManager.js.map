{"version":3,"sources":["KeyboardManager.tsx"],"names":["React","TextInput","Keyboard","KeyboardManager","componentWillUnmount","clearKeyboardTimeout","previouslyFocusedTextInput","startTimestamp","keyboardTimeout","undefined","clearTimeout","handlePageChangeStart","props","enabled","input","State","currentlyFocusedField","blurTextInput","Date","now","handlePageChangeConfirm","dismiss","handlePageChangeCancel","setTimeout","focusTextInput","children","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","Component"],"mappings":"mVAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,cAApC,C,GAWqBC,CAAAA,e,kaACnBC,oB,CAAuB,UAAM,CAC3B,MAAKC,oBAAL,GACD,C,OAGOC,0B,CAA4C,I,OAC5CC,c,CAAyB,C,OAGzBF,oB,CAAuB,UAAM,CACnC,GAAI,MAAKG,eAAL,GAAyBC,SAA7B,CAAwC,CACtCC,YAAY,CAAC,MAAKF,eAAN,CAAZ,CACA,MAAKA,eAAL,CAAuBC,SAAvB,CACD,CACF,C,OAEOE,qB,CAAwB,UAAM,CACpC,GAAI,CAAC,MAAKC,KAAL,CAAWC,OAAhB,CAAyB,CACvB,OACD,CACD,MAAKR,oBAAL,GAEA,GAAMS,CAAAA,KAAK,CAAGb,SAAS,CAACc,KAAV,CAAgBC,qBAAhB,EAAd,CAGAf,SAAS,CAACc,KAAV,CAAgBE,aAAhB,CAA8BH,KAA9B,EAGA,MAAKR,0BAAL,CAAkCQ,KAAlC,CAGA,MAAKP,cAAL,CAAsBW,IAAI,CAACC,GAAL,EAAtB,CACD,C,OAEOC,uB,CAA0B,UAAM,CACtC,GAAI,CAAC,MAAKR,KAAL,CAAWC,OAAhB,CAAyB,CACvB,OACD,CACD,MAAKR,oBAAL,GAEAH,QAAQ,CAACmB,OAAT,GAGA,MAAKf,0BAAL,CAAkC,IAAlC,CACD,C,OAEOgB,sB,CAAyB,UAAM,CACrC,GAAI,CAAC,MAAKV,KAAL,CAAWC,OAAhB,CAAyB,CACvB,OACD,CACD,MAAKR,oBAAL,GAGA,GAAMS,CAAAA,KAAK,CAAG,MAAKR,0BAAnB,CAEA,GAAIQ,KAAJ,CAAW,CAQT,GAAII,IAAI,CAACC,GAAL,GAAa,MAAKZ,cAAlB,CAAmC,GAAvC,CAA4C,CAC1C,MAAKC,eAAL,CAAuBe,UAAU,CAAC,UAAM,CACtCtB,SAAS,CAACc,KAAV,CAAgBS,cAAhB,CAA+BV,KAA/B,EACA,MAAKR,0BAAL,CAAkC,IAAlC,CACD,CAHgC,CAG9B,GAH8B,CAAjC,CAID,CALD,IAKO,CACLL,SAAS,CAACc,KAAV,CAAgBS,cAAhB,CAA+BV,KAA/B,EACA,MAAKR,0BAAL,CAAkC,IAAlC,CACD,CACF,CACF,C,kFAEQ,CACP,MAAO,MAAKM,KAAL,CAAWa,QAAX,CAAoB,CACzBC,iBAAiB,CAAE,KAAKf,qBADC,CAEzBgB,mBAAmB,CAAE,KAAKP,uBAFD,CAGzBQ,kBAAkB,CAAE,KAAKN,sBAHA,CAApB,CAAP,CAKD,C,6BAlF0CtB,KAAK,CAAC6B,S,SAA9B1B,e","sourcesContent":["import * as React from 'react';\nimport { TextInput, Keyboard } from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: () => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\nexport default class KeyboardManager extends React.Component<Props> {\n  componentWillUnmount = () => {\n    this.clearKeyboardTimeout();\n  };\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n  private startTimestamp: number = 0;\n  private keyboardTimeout: any;\n\n  private clearKeyboardTimeout = () => {\n    if (this.keyboardTimeout !== undefined) {\n      clearTimeout(this.keyboardTimeout);\n      this.keyboardTimeout = undefined;\n    }\n  };\n\n  private handlePageChangeStart = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n    this.clearKeyboardTimeout();\n\n    const input = TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n\n    // Store timestamp for touch start\n    this.startTimestamp = Date.now();\n  };\n\n  private handlePageChangeConfirm = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n    this.clearKeyboardTimeout();\n\n    Keyboard.dismiss();\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = null;\n  };\n\n  private handlePageChangeCancel = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n    this.clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - this.startTimestamp < 100) {\n        this.keyboardTimeout = setTimeout(() => {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = null;\n        }, 100);\n      } else {\n        TextInput.State.focusTextInput(input);\n        this.previouslyFocusedTextInput = null;\n      }\n    }\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"]}