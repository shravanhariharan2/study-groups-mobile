{"version":3,"sources":["CardContainer.tsx"],"names":["React","View","StyleSheet","Card","useTheme","CardContainer","active","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","floatingHeaderHeight","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","headerMode","headerShown","headerStyleInterpolator","headerTransparent","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","state","transitionSpec","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","progress","current","next","marginTop","backgroundColor","background","absoluteFill","styles","container","mode","scenes","styleInterpolator","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { NavigationState as StackNavigationState } from 'react-navigation';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport useTheme from '../../../utils/useTheme';\nimport {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  state: StackNavigationState;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  floatingHeaderHeight: number;\n};\n\nexport default function CardContainer({\n  active,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  floatingHeaderHeight,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  state,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  return (\n    <Card\n      index={index}\n      active={active}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents=\"box-none\"\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: floatingHeaderHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>{renderScene({ route: scene.route })}</View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              state,\n              getPreviousRoute,\n              styleInterpolator: headerStyleInterpolator,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}