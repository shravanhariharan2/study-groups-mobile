{"version":3,"sources":["PointerEventsView.tsx"],"names":["TRUE","FALSE","PointerEventsView","active","rest","React","useState","Animated","Value","pointerEventsEnabled","root","useRef","setPointerEventsEnabled","useCallback","enabled","pointerEvents","current","setNativeProps","useEffect","setValue"],"mappings":"+hBAAA,oDACA,yC,wHAQA,GAAMA,CAAAA,IAAI,CAAG,CAAb,CACA,GAAMC,CAAAA,KAAK,CAAG,CAAd,CAMe,QAASC,CAAAA,iBAAT,MAAuD,IAA1BC,CAAAA,MAA0B,MAA1BA,MAA0B,CAAfC,IAAe,4EACrCC,KAAK,CAACC,QAAN,CAC7B,iBAAM,IAAIC,uBAASC,KAAb,CAAmBL,MAAM,CAAGH,IAAH,CAAUC,KAAnC,CAAN,EAD6B,CADqC,iEAC7DQ,oBAD6D,qBAKpE,GAAMC,CAAAA,IAAI,CAAGL,KAAK,CAACM,MAAN,CAA0B,IAA1B,CAAb,CAEA,GAAMC,CAAAA,uBAAuB,CAAGP,KAAK,CAACQ,WAAN,CAAkB,SAACC,OAAD,CAAsB,CACtE,GAAMC,CAAAA,aAAa,CAAGD,OAAO,CAAG,UAAH,CAAgB,MAA7C,CAEAJ,IAAI,CAACM,OAAL,EAAgBN,IAAI,CAACM,OAAL,CAAaC,cAAb,CAA4B,CAAEF,aAAa,CAAbA,aAAF,CAA5B,CAAhB,CACD,CAJ+B,CAI7B,EAJ6B,CAAhC,CAMAV,KAAK,CAACa,SAAN,CAAgB,UAAM,CACpBT,oBAAoB,CAACU,QAArB,CAA8BhB,MAAM,CAAGH,IAAH,CAAUC,KAA9C,EACAW,uBAAuB,CAACT,MAAD,CAAvB,CACD,CAHD,CAGG,CAACA,MAAD,CAASM,oBAAT,CAA+BG,uBAA/B,CAHH,EAKA,MAAO,qBAAC,iBAAD,wBAAM,GAAG,CAAEF,IAAX,EAAqBN,IAArB,mDAAP,CACD","sourcesContent":["import * as React from 'react';\nimport { Animated, View, ViewProps } from 'react-native';\n\ntype Props = ViewProps & {\n  active: boolean;\n  progress: Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n};\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * Component that automatically computes the `pointerEvents` property\n * whenever position changes.\n */\nexport default function PointerEventsView({ active, ...rest }: Props) {\n  const [pointerEventsEnabled] = React.useState(\n    () => new Animated.Value(active ? TRUE : FALSE)\n  );\n\n  const root = React.useRef<View | null>(null);\n\n  const setPointerEventsEnabled = React.useCallback((enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    root.current && root.current.setNativeProps({ pointerEvents });\n  }, []);\n\n  React.useEffect(() => {\n    pointerEventsEnabled.setValue(active ? TRUE : FALSE);\n    setPointerEventsEnabled(active);\n  }, [active, pointerEventsEnabled, setPointerEventsEnabled]);\n\n  return <View ref={root} {...rest} />;\n}\n"]}