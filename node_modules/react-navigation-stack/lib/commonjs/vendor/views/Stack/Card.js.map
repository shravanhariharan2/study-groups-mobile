{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","Card","isClosing","Animated","Value","inverted","props","gestureDirection","layout","width","height","isSwiping","animate","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransitionStart","toValue","getAnimateToValue","spec","close","open","animation","spring","timing","Boolean","config","useNativeDriver","start","finished","handleStartInteraction","interactionHandle","undefined","InteractionManager","createInteractionHandle","handleEndInteraction","clearInteractionHandle","handleGestureStateChange","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","GestureState","BEGAN","setValue","CANCELLED","END","distance","translation","translationY","velocityY","translationX","velocityX","Math","abs","getCardAnimationContext","index","current","next","insetTop","insetRight","insetBottom","insetLeft","progress","swiping","layouts","screen","insets","top","right","bottom","left","gestureRef","React","createRef","prevProps","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","active","styleInterpolator","overlayEnabled","shadowEnabled","gestureEnabled","children","customContainerStyle","containerStyle","contentStyle","rest","interpolatedStyle","animationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","StyleSheet","flatten","backgroundColor","isTransparent","alpha","styles","overlay","container","gestureActivationCriteria","shadow","shadowHorizontal","shadowVertical","content","Component","defaultProps","Platform","OS","create","flex","overflow","absoluteFillObject","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\nimport PointerEventsView from './PointerEventsView';\nimport StackGestureContext from '../../utils/StackGestureContext';\nimport StackCardAnimationContext from '../../utils/StackCardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  active: boolean;\n  closing?: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing?: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    onTransitionStart?.({ closing: Boolean(closing) });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      useNativeDriver: true,\n      toValue,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED:\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n        onGestureCanceled?.();\n        break;\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          Math.abs(translation + velocity * gestureVelocityImpact) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : false;\n\n        this.animate({ closing, velocity });\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private gestureRef: React.Ref<PanGestureHandler> = React.createRef();\n\n  render() {\n    const {\n      active,\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = styleInterpolator({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets,\n    });\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver: true }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor\n      ? Color(backgroundColor).alpha() === 0\n      : false;\n\n    return (\n      <StackGestureContext.Provider value={this.gestureRef}>\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled && overlayStyle ? (\n            <Animated.View\n              pointerEvents=\"none\"\n              style={[styles.overlay, overlayStyle]}\n            />\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              ref={this.gestureRef}\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? styles.shadowHorizontal\n                        : styles.shadowVertical,\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <PointerEventsView\n                  active={active}\n                  progress={current}\n                  style={[styles.content, contentStyle]}\n                >\n                  <StackCardAnimationContext.Provider value={animationContext}>\n                    {children}\n                  </StackCardAnimationContext.Provider>\n                </PointerEventsView>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </StackGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowVertical: {\n    top: 0,\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n});\n"]}