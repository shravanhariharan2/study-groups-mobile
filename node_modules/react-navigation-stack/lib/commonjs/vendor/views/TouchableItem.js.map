{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","Platform","OS","Version","props","style","pressColor","borderless","children","rest","TouchableNativeFeedback","canUseNativeForeground","Ripple","React","Children","only","top","bottom","right","left","disabled","Component","defaultProps"],"mappings":"k5BASA,oDACA,yCAQA,4E,8GAUA,GAAMA,CAAAA,wBAAwB,CAAG,EAAjC,C,GAEqBC,CAAAA,a,kWAMV,CASP,GACEC,sBAASC,EAAT,GAAgB,SAAhB,EACAD,sBAASE,OAAT,EAAoBJ,wBAFtB,CAGE,iBAC6D,KAAKK,KADlE,CACQC,KADR,aACQA,KADR,CACeC,UADf,aACeA,UADf,CAC2BC,UAD3B,aAC2BA,UAD3B,CACuCC,QADvC,aACuCA,QADvC,CACoDC,IADpD,mGAGA,MACE,qBAAC,oCAAD,0BACMA,IADN,EAEE,aAAa,CAAEC,qCAAwBC,sBAAxB,EAFjB,CAGE,UAAU,CAAED,qCAAwBE,MAAxB,CAA+BN,UAA/B,CAA2CC,UAA3C,CAHd,kDAKE,oBAAC,iBAAD,EAAM,KAAK,CAAEF,KAAb,iDAAqBQ,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBP,QAApB,CAArB,CALF,CADF,CASD,CAfD,IAeO,IAAIP,sBAASC,EAAT,GAAgB,KAApB,CAA2B,CAChC,MACE,qBAAC,yBAAD,wBACE,OAAO,CAAE,CAAEc,GAAG,CAAE,EAAP,CAAWC,MAAM,CAAE,EAAnB,CAAuBC,KAAK,CAAE,EAA9B,CAAkCC,IAAI,CAAE,EAAxC,CADX,CAEE,oBAAoB,KAFtB,CAGE,OAAO,CAAE,CAAC,KAAKf,KAAL,CAAWgB,QAHvB,EAIM,KAAKhB,KAJX,mDAMG,KAAKA,KAAL,CAAWI,QANd,CADF,CAUD,CAXM,IAWA,CACL,MACE,qBAAC,6BAAD,0BAAsB,KAAKJ,KAA3B,mDACG,KAAKA,KAAL,CAAWI,QADd,CADF,CAKD,CACF,C,2BAhDwCK,KAAK,CAACQ,S,gCAA5BrB,a,CACZsB,Y,CAAe,CACpBf,UAAU,CAAE,KADQ,CAEpBD,UAAU,CAAE,oBAFQ,C","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport BorderlessButton from './BorderlessButton';\n\ntype Props = ViewProps & {\n  pressColor: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, pressColor, borderless, children, ...rest } = this.props;\n\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else if (Platform.OS === 'ios') {\n      return (\n        <BorderlessButton\n          hitSlop={{ top: 10, bottom: 10, right: 10, left: 10 }}\n          disallowInterruption\n          enabled={!this.props.disabled}\n          {...this.props}\n        >\n          {this.props.children}\n        </BorderlessButton>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...this.props}>\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]}